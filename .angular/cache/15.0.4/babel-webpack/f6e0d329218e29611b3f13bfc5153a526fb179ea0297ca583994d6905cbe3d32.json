{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(auth, router) {\n    this.auth = auth;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.auth.getToken()) {\n      return true;\n    } else {\n      this.router.navigateByUrl('/auth/login');\n      return false;\n    }\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EAElBC,YAAoBC,IAAiB,EAAUC,MAAc;IAAzC,SAAI,GAAJD,IAAI;IAAuB,WAAM,GAANC,MAAM;EAErD;EACAC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACjE,IAAG,IAAI,CAACJ,IAAI,CAACK,QAAQ,EAAE,EAAC;MACpB,OAAO,IAAI;KACd,MACG;MACA,IAAI,CAACJ,MAAM,CAACK,aAAa,CAAC,aAAa,CAAC;MACxC,OAAO,KAAK;;EAEpB;;AAbSR,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAS,SAATT,SAAS;EAAAU,YAFN;AAAM","names":["AuthGuard","constructor","auth","router","canActivate","route","state","getToken","navigateByUrl","factory","providedIn"],"sourceRoot":"","sources":["/Users/macbookpro/Documents/AngularMed/src/app/core/guards/auth.guards.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\n\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n    constructor(private auth: AuthService, private router: Router) {\n    \n    }\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean  {\n        if(this.auth.getToken()){\n            return true;\n        }\n        else{\n            this.router.navigateByUrl('/auth/login');\n            return false;\n        }\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}